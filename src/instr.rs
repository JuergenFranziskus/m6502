use std::fmt::Display;

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum Op {
    Adc,
    Alr,
    Anc,
    And,
    Ane,
    Arr,
    Asl,
    Bcc,
    Bcs,
    Beq,
    Bit,
    Bmi,
    Bne,
    Bpl,
    Brk,
    Bvc,
    Bvs,
    Clc,
    Cld,
    Cli,
    Clv,
    Cmp,
    Cpx,
    Cpy,
    Dcp,
    Dec,
    Dex,
    Dey,
    Eor,
    Inc,
    Inx,
    Iny,
    Isc,
    Jam,
    Jmp,
    Jsr,
    Las,
    Lax,
    Lda,
    Ldx,
    Ldy,
    Lsr,
    Lxa,
    Nop,
    Ora,
    Pha,
    Php,
    Pla,
    Plp,
    Rla,
    Rol,
    Ror,
    Rra,
    Rti,
    Rts,
    Sax,
    Sbc,
    Sbx,
    Sec,
    Sed,
    Sei,
    Sha,
    Shx,
    Shy,
    Slo,
    Sre,
    Sta,
    Stx,
    Sty,
    Tas,
    Tax,
    Tay,
    Tsx,
    Txa,
    Txs,
    Tya,
}
impl Op {
    pub fn reads_operand(self) -> bool {
        use Op::*;
        matches!(
            self,
            Lda | Ldx
                | Ldy
                | Eor
                | And
                | Ora
                | Adc
                | Sbc
                | Cmp
                | Cpx
                | Cpy
                | Bit
                | Lax
                | Nop
                | Asl
                | Lsr
                | Rol
                | Ror
                | Inc
                | Dec
                | Slo
                | Sre
                | Rla
                | Rra
                | Isc
                | Dcp
                | Las
        )
    }
    pub fn writes_operand(self) -> bool {
        use Op::*;
        matches!(
            self,
            Sta | Stx
                | Sty
                | Sax
                | Asl
                | Lsr
                | Rol
                | Ror
                | Inc
                | Dec
                | Slo
                | Sre
                | Rla
                | Rra
                | Isc
                | Dcp
                | Sha
                | Shx
                | Shy
                | Tas
        )
    }
    pub fn is_rmw(self) -> bool {
        self.reads_operand() && self.writes_operand()
    }
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum Am {
    Absolute,
    AbsoluteX,
    AbsoluteY,
    Accumulator,
    Immediate,
    Implied,
    IndexedIndirect,
    Indirect,
    IndirectIndexed,
    Relative,
    Zero,
    ZeroX,
    ZeroY,
}
impl Display for Am {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let str = match self {
            Self::Absolute => "a",
            Self::AbsoluteX => "a,x",
            Self::AbsoluteY => "a,y",
            Self::Accumulator => "A",
            Self::Immediate => "i",
            Self::Implied => "",
            Self::IndexedIndirect => "(z,x)",
            Self::Indirect => "(a)",
            Self::IndirectIndexed => "(z),y",
            Self::Relative => "r",
            Self::Zero => "z",
            Self::ZeroX => "z,x",
            Self::ZeroY => "z,y",
        };

        Display::fmt(str, f)
    }
}

pub fn decode(opcode: u8) -> (Op, Am) {
    DECODE_TABLE[opcode as usize]
}

use Am::*;
use Op::*;
static DECODE_TABLE: [(Op, Am); 256] = [
    (Brk, Implied),
    (Ora, IndexedIndirect),
    (Jam, Implied),
    (Slo, IndexedIndirect),
    (Nop, Zero),
    (Ora, Zero),
    (Asl, Zero),
    (Slo, Zero),
    (Php, Implied),
    (Ora, Immediate),
    (Asl, Accumulator),
    (Anc, Immediate),
    (Nop, Absolute),
    (Ora, Absolute),
    (Asl, Absolute),
    (Slo, Absolute),
    (Bpl, Relative),
    (Ora, IndirectIndexed),
    (Jam, Implied),
    (Slo, IndirectIndexed),
    (Nop, ZeroX),
    (Ora, ZeroX),
    (Asl, ZeroX),
    (Slo, ZeroX),
    (Clc, Implied),
    (Ora, AbsoluteY),
    (Nop, Implied),
    (Slo, AbsoluteY),
    (Nop, AbsoluteX),
    (Ora, AbsoluteX),
    (Asl, AbsoluteX),
    (Slo, AbsoluteX),
    (Jsr, Absolute),
    (And, IndexedIndirect),
    (Jam, Implied),
    (Rla, IndexedIndirect),
    (Bit, Zero),
    (And, Zero),
    (Rol, Zero),
    (Rla, Zero),
    (Plp, Implied),
    (And, Immediate),
    (Rol, Accumulator),
    (Anc, Immediate),
    (Bit, Absolute),
    (And, Absolute),
    (Rol, Absolute),
    (Rla, Absolute),
    (Bmi, Relative),
    (And, IndirectIndexed),
    (Jam, Implied),
    (Rla, IndirectIndexed),
    (Nop, ZeroX),
    (And, ZeroX),
    (Rol, ZeroX),
    (Rla, ZeroX),
    (Sec, Implied),
    (And, AbsoluteY),
    (Nop, Implied),
    (Rla, AbsoluteY),
    (Nop, AbsoluteX),
    (And, AbsoluteX),
    (Rol, AbsoluteX),
    (Rla, AbsoluteX),
    (Rti, Implied),
    (Eor, IndexedIndirect),
    (Jam, Implied),
    (Sre, IndexedIndirect),
    (Nop, Zero),
    (Eor, Zero),
    (Lsr, Zero),
    (Sre, Zero),
    (Pha, Implied),
    (Eor, Immediate),
    (Lsr, Accumulator),
    (Alr, Immediate),
    (Jmp, Absolute),
    (Eor, Absolute),
    (Lsr, Absolute),
    (Sre, Absolute),
    (Bvc, Relative),
    (Eor, IndirectIndexed),
    (Jam, Implied),
    (Sre, IndirectIndexed),
    (Nop, ZeroX),
    (Eor, ZeroX),
    (Lsr, ZeroX),
    (Sre, ZeroX),
    (Cli, Implied),
    (Eor, AbsoluteY),
    (Nop, Implied),
    (Sre, AbsoluteY),
    (Nop, AbsoluteX),
    (Eor, AbsoluteX),
    (Lsr, AbsoluteX),
    (Sre, AbsoluteX),
    (Rts, Implied),
    (Adc, IndexedIndirect),
    (Jam, Implied),
    (Rra, IndexedIndirect),
    (Nop, Zero),
    (Adc, Zero),
    (Ror, Zero),
    (Rra, Zero),
    (Pla, Implied),
    (Adc, Immediate),
    (Ror, Accumulator),
    (Arr, Immediate),
    (Jmp, Indirect),
    (Adc, Absolute),
    (Ror, Absolute),
    (Rra, Absolute),
    (Bvs, Relative),
    (Adc, IndirectIndexed),
    (Jam, Implied),
    (Rra, IndirectIndexed),
    (Nop, ZeroX),
    (Adc, ZeroX),
    (Ror, ZeroX),
    (Rra, ZeroX),
    (Sei, Implied),
    (Adc, AbsoluteY),
    (Nop, Implied),
    (Rra, AbsoluteY),
    (Nop, AbsoluteX),
    (Adc, AbsoluteX),
    (Ror, AbsoluteX),
    (Rra, AbsoluteX),
    (Nop, Immediate),
    (Sta, IndexedIndirect),
    (Nop, Immediate),
    (Sax, IndexedIndirect),
    (Sty, Zero),
    (Sta, Zero),
    (Stx, Zero),
    (Sax, Zero),
    (Dey, Implied),
    (Nop, Immediate),
    (Txa, Implied),
    (Ane, Immediate),
    (Sty, Absolute),
    (Sta, Absolute),
    (Stx, Absolute),
    (Sax, Absolute),
    (Bcc, Relative),
    (Sta, IndirectIndexed),
    (Jam, Implied),
    (Sha, IndirectIndexed),
    (Sty, ZeroX),
    (Sta, ZeroX),
    (Stx, ZeroY),
    (Sax, ZeroY),
    (Tya, Implied),
    (Sta, AbsoluteY),
    (Txs, Implied),
    (Tas, AbsoluteY),
    (Shy, AbsoluteX),
    (Sta, AbsoluteX),
    (Shx, AbsoluteY),
    (Sha, AbsoluteY),
    (Ldy, Immediate),
    (Lda, IndexedIndirect),
    (Ldx, Immediate),
    (Lax, IndexedIndirect),
    (Ldy, Zero),
    (Lda, Zero),
    (Ldx, Zero),
    (Lax, Zero),
    (Tay, Implied),
    (Lda, Immediate),
    (Tax, Implied),
    (Lxa, Immediate),
    (Ldy, Absolute),
    (Lda, Absolute),
    (Ldx, Absolute),
    (Lax, Absolute),
    (Bcs, Relative),
    (Lda, IndirectIndexed),
    (Jam, Implied),
    (Lax, IndirectIndexed),
    (Ldy, ZeroX),
    (Lda, ZeroX),
    (Ldx, ZeroY),
    (Lax, ZeroY),
    (Clv, Implied),
    (Lda, AbsoluteY),
    (Tsx, Implied),
    (Las, AbsoluteY),
    (Ldy, AbsoluteX),
    (Lda, AbsoluteX),
    (Ldx, AbsoluteY),
    (Lax, AbsoluteY),
    (Cpy, Immediate),
    (Cmp, IndexedIndirect),
    (Nop, Immediate),
    (Dcp, IndexedIndirect),
    (Cpy, Zero),
    (Cmp, Zero),
    (Dec, Zero),
    (Dcp, Zero),
    (Iny, Implied),
    (Cmp, Immediate),
    (Dex, Implied),
    (Sbx, Immediate),
    (Cpy, Absolute),
    (Cmp, Absolute),
    (Dec, Absolute),
    (Dcp, Absolute),
    (Bne, Relative),
    (Cmp, IndirectIndexed),
    (Jam, Implied),
    (Dcp, IndirectIndexed),
    (Nop, ZeroX),
    (Cmp, ZeroX),
    (Dec, ZeroX),
    (Dcp, ZeroX),
    (Cld, Implied),
    (Cmp, AbsoluteY),
    (Nop, Implied),
    (Dcp, AbsoluteY),
    (Nop, AbsoluteX),
    (Cmp, AbsoluteX),
    (Dec, AbsoluteX),
    (Dcp, AbsoluteX),
    (Cpx, Immediate),
    (Sbc, IndexedIndirect),
    (Nop, Immediate),
    (Isc, IndexedIndirect),
    (Cpx, Zero),
    (Sbc, Zero),
    (Inc, Zero),
    (Isc, Zero),
    (Inx, Implied),
    (Sbc, Immediate),
    (Nop, Implied),
    (Sbc, Immediate),
    (Cpx, Absolute),
    (Sbc, Absolute),
    (Inc, Absolute),
    (Isc, Absolute),
    (Beq, Relative),
    (Sbc, IndirectIndexed),
    (Jam, Implied),
    (Isc, IndirectIndexed),
    (Nop, ZeroX),
    (Sbc, ZeroX),
    (Inc, ZeroX),
    (Isc, ZeroX),
    (Sed, Implied),
    (Sbc, AbsoluteY),
    (Nop, Implied),
    (Isc, AbsoluteY),
    (Nop, AbsoluteX),
    (Sbc, AbsoluteX),
    (Inc, AbsoluteX),
    (Isc, AbsoluteX),
];
